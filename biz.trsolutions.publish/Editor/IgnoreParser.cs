/*
 * IgnoreParser class
 * 
 * Copyright (c) 2021 TR Solutions Pte Ltd
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using UnityEngine;

namespace UnityEditor.TRSolutions.Publish {
    /// <summary>
    /// A parser that can determine whether or not to include a file for archiving.
    /// <para>
    /// The class stores a parsed copy of the local <c>.gitignore</c>
    /// file (or the standard one from GitHub) and then uses it to
    /// determine which files and folders can be ignored in the same
    /// way the <c>git</c> does.
    /// </para>
    /// <para>
    /// Filenames are passed as unix-style paths relative to the project root (as <c>/</c>),
    /// with a <c>/</c> at the end to denote a folder,
    /// e.g the Assets folder would be passed as <c>/Assets/</c>
    /// </para>
    /// <para>
    /// Note if you are using the .gitignore generated by GitHub, you should add
    /// ignores for the <c>/[Rr]ecordings/</c> and <c>/[Dd]ocumentation/</c> folders.
    /// </para>
    /// </summary>
    public class IgnoreParser
    {
        /// <summary>
        /// The default ignore list
        /// (copied from https://github.com/github/gitignore/blob/master/Unity.gitignore in 2021
        /// and updated to ignore Recordings and Documentation folders and to add Mac OS excludes.)
        /// </summary>
        private static string[] defaultIgnoreList = new string[] {
                "# This .gitignore file should be placed at the root of your Unity project directory",
                "#",
                "# Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore",
                "#",
                "/[Ll]ibrary/",
                "/[Tt]emp/",
                "/[Oo]bj/",
                "/[Bb]uild/",
                "/[Bb]uilds/",
                "/[Ll]ogs/",
                "/[Mm]emoryCaptures/",
                "/[Rr]ecordings/",
                "/[Dd]ocumentation/",
                "",
                "# Never ignore Asset meta data",
                "!/[Aa]ssets/**/*.meta",
                "",
                "# Uncomment this line if you wish to ignore the asset store tools plugin",
                "# /[Aa]ssets/AssetStoreTools*",
                "",
                "# Autogenerated Jetbrains Rider plugin",
                "[Aa]ssets/Plugins/Editor/JetBrains*",
                "",
                "# Visual Studio cache directory",
                ".vs/",
                "",
                "# Gradle cache directory",
                ".gradle/",
                "",
                "# Autogenerated VS/MD/Consulo solution and project files",
                "ExportedObj/",
                ".consulo/",
                "*.csproj",
                "*.unityproj",
                "*.sln",
                "*.suo",
                "*.tmp",
                "*.user",
                "*.userprefs",
                "*.pidb",
                "*.booproj",
                "*.svd",
                "*.pdb",
                "*.mdb",
                "*.opendb",
                "*.VC.db",
                "",
                "# Unity3D generated meta files",
                "*.pidb.meta",
                "*.pdb.meta",
                "*.mdb.meta",
                "",
                "# Unity3D generated file on crash reports",
                "sysinfo.txt",
                "",
                "# Builds",
                "*.apk",
                "*.unitypackage",
                "",
                "# Crashlytics generated file",
                "crashlytics-build.properties",
                "# content below from: https://github.com/github/gitignore/blob/main/Global/macOS.gitignore",
                "# General",
                ".DS_Store",
                ".AppleDouble",
                ".LSOverride",
            };
        private Regex[] keepExpressions;
        private Regex[] ignoreExpressions;

        /// <summary>
        /// Constructs an IgnoreParser that uses
        /// a <c>.gitignore</c> file in the current folder or,
        /// if there is no such file,
        /// the default list.
        /// </summary>
        public IgnoreParser()
        {
            string[] ignoreList;
            // If we can find a ".gitignore" in the current folder,
            // use it. Otherwise stick to our default
            if (File.Exists(".gitignore"))
            {
                ignoreList = File.ReadAllLines(".gitignore");
            }
            else
            {
                ignoreList = defaultIgnoreList;
            }
            var expressions = ParseList(ignoreList);
            keepExpressions = expressions.Item1;
            ignoreExpressions = expressions.Item2;
        }

        /// <summary>
        /// Constructs an IgnoreParser that uses a given list of strings.
        /// <para>
        /// The strings should be in the format used by .git
        /// (https://git-scm.com/docs/gitignore).
        /// </para>
        /// </summary>
        /// <param name="ignoreList"></param>
        public IgnoreParser(string[] ignoreList)
        {
            var expressions = ParseList(ignoreList);
            keepExpressions = expressions.Item1;
            ignoreExpressions = expressions.Item2;
        }

        /// <summary>
        /// Parses a given list of strings that represent a .gitignore file
        /// to create a "keep" list and an "ignore" list.
        /// <para>
        /// The strings should be in the format used by .git
        /// (https://git-scm.com/docs/gitignore).
        /// </para>
        /// </summary>
        /// <param name="ignoreList"></param>
        /// <returns>
        /// A tuple containing an array of keep regular expressions and
        /// an array of ignore regular expressions.
        /// </returns>
        private static Tuple<Regex[], Regex[]> ParseList(string[] ignoreList)
        {
            var keepExpressionList = new List<Regex>(ignoreList.Length);
            var ignoreExpressionList = new List<Regex>(ignoreList.Length);
            // construct the list of expressions from our input data
            foreach (var line in ignoreList)
            {
                // skip comments
                if (line.Length == 0 || line.StartsWith("#")) {
                    continue;
                }
                // Keep or ignore?
                bool keep;
                string processLine;
                if (line.StartsWith("!"))
                {
                    keep = true;
                    processLine = line.Substring(1);
                } else
                {
                    keep = false;
                    processLine = line;
                }
                // Convert to regex string
                var expression = PrepareRegex(processLine);
                if (keep)
                {
                    keepExpressionList.Add(new Regex(expression));
                } else
                {
                    ignoreExpressionList.Add(new Regex(expression));
                }
            }
            return new Tuple<Regex[], Regex[]>(keepExpressionList.ToArray(), ignoreExpressionList.ToArray());
        }

        /// <summary>
        /// Determines if a given file is in the ignore list.
        /// </summary>
        /// <param name="path">A pathname relative to the project root, with the root as <c>/</c>.</param>
        /// <returns>true if the file should be ignored.</returns>
        public bool IsIgnored(string path)
        {
            foreach (var expression in keepExpressions)
            {
                if (expression.IsMatch(path))
                {
                    return false;
                }
            }
            foreach (var expression in ignoreExpressions)
            {
                if (expression.IsMatch(path))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Displays a list of all the keep and ignore expressions.
        /// </summary>
        /// <returns>A string containing a formatted list of all the keep and ignore expressions.</returns>
        public override string ToString()
        {
            var output = "keep: ";
            for (int i = 0; i < (keepExpressions.Length - 1); i++)
            {
                output += keepExpressions[i] + "\n      ";
            }
            if (keepExpressions.Length > 0)
            {
                output += keepExpressions[keepExpressions.Length - 1];
            }

            output += "\nignore: ";
            for (int i = 0; i < (ignoreExpressions.Length - 1); i++)
            {
                output += ignoreExpressions[i] + "\n      ";
            }
            if (ignoreExpressions.Length > 0)
            {
                output += ignoreExpressions[ignoreExpressions.Length - 1];
            }

            return output;
        }

        // -------------------------------------------------

        /// <summary>
        /// Prepares a regex from a given .gitignore string.
        /// <para>This algorithm was adapted from one written in Javascript
        /// at https://github.com/codemix/gitignore-parser/blob/master/lib/index.js </para>
        /// </summary>
        /// <param name="line"></param>
        /// <returns>The regular expression for the given string.</returns>
        private static string PrepareRegex(string line)
        {
            // . -> [.]
            // ** -> (.+)
            // * -> [^/]+
            // return escapeRegex(pattern).replace('**', '(.+)').replace('*', '([^\\/]+)');
            return EscapeRegex(line)
                .Replace(@"\/**\/", "(.+)") // "A slash followed by two conseq asterisks then a slash matches 0 or more directories."
                .Replace("**", "(.+)")
                .Replace("*", "([^\\/]+)");
        }
        /// <summary>
        /// Ensures that characters important to regex but not to glob
        /// don't end up being processed by regex.
        /// </summary>
        /// <param name="pattern"></param>
        /// <returns></returns>
        private static string EscapeRegex(string pattern)
        {
            // Escape the following special characters:
            // -, [, ], /, {, }, (, ), +, ?, ., \, ^, $, |
            // return pattern.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/ g, "\\$&");
            var findPattern = new Regex(@"[\-\/\{\}\(\)\+\?\.\\\^\$\|]");
            return findPattern.Replace(pattern, "\\$&");
        }

    }
}
